<!doctype html>

<html lang="en">
<head>
    <meta charset="utf-8">
    <title>Incendie</title>

    <link rel="stylesheet" href="css/main.css">

    <script src="https://code.jquery.com/jquery-2.2.4.min.js"></script>
    <script src="http://cdn.peerjs.com/0.3/peer.min.js"></script>
    <script src="javascript/jsonpack.js"></script>
    <script src="javascript/tiles.js"></script>
    <script src="maps/map1.js"></script>
    <script src="javascript/map.js"></script>
    <script>

        var peer;
        var peer_server_name;
        var peer_player_name;
       
        var timer = performance.now();
        var ctx;
        var assets = new Assets();
        var players = [];
        var keyboard = [];

        var peer_send = function(data) {
            //console.log('Data envoyé', data);

            for (cn in peer.connections) {
                peer.connections[cn][0].send(data);
            }

        }

        var change_direction = function(player) {
            player.action = 'none';



            if (keyboard[37]) {
                if (player.direction != 'left') {
                    player.direction = 'left';                   
                    peer_send({'action' : 'change_direction', 'current' : player });
                    return;
                }
            }

            if (keyboard[38]) {
                if (player.direction != 'up') {
                    player.direction = 'up';                   
                    peer_send({'action' : 'change_direction', 'current' : player });
                    return;
                }
            }

            if (keyboard[39]) {
                if (player.direction != 'right') {
                    player.direction = 'right';                   
                    peer_send({'action' : 'change_direction', 'current' : player });
                    return;
                }
            }

            if (keyboard[40]) {
                if (player.direction != 'down') {
                    player.direction = 'down';                   
                    peer_send({'action' : 'change_direction', 'current' : player });
                    return;
                }
            }


            if (keyboard[32]) {
                if (player.action != 'soak') {
                    player.action = 'soak';
                    peer_send({'action' : 'change_direction', 'current' : player });
                }
                return;
            }


            if (keyboard[90]) {
                if (player.action != 'destroy') {
                    player.action = 'destroy';
                    peer_send({'action' : 'change_direction', 'current' : player });
                }
                return;
            }

            if (player.direction != 'none') {
                player.direction = 'none';
                peer_send({'action' : 'change_direction', 'current' : player });
                return;
            }
        }

        var move_viewport = function(player) {

            var x = Math.round((board.width/2) - players[player].current.x - 32);
            var y = Math.round((board.height/2) - players[player].current.y - 32);

            x = Math.min(x, 0);
            y = Math.min(y, 0);

            x = Math.max(x, Math.round(board.width - map.width));
            y = Math.max(y, Math.round(board.height - map.height));

            ctx.translate(x, y);

        }

        var main = function(now) {

            ctx.save();
            ctx.clearRect(0, 0, board.width, board.height);

            for (var i = 0; i < players.length; i++) {
                if (players[i].current.id == peer.connections[peer_server_name][0].id) {
                    move_viewport(i);
                    change_direction(players[i].current);
                    break;
                }
            }
            map.draw();

            for (var i = 0; i < players.length; i++) {
                players[i].update(now-timer);
                players[i].draw();
            }

            ctx.restore();
            timer=now;
            requestAnimationFrame(main);
        };

        $( document ).on('AssetLoad', function(e, current, total){
            //console.log(current, total, players.length, map);
            if (current == total && map) {
                main();
            }
        });


        $(document).ready(function() {

            board = $('canvas')[0];
            ctx = board.getContext('2d');

            ctx.canvas.width = window.innerWidth;
            ctx.canvas.height = window.innerHeight;


            $(window).resize(function() {
                ctx.canvas.width = window.innerWidth;
                ctx.canvas.height = window.innerHeight;        
            });

            $('#input_player_name').val('#'+Math.floor(Math.random()*16777215).toString(16));

            $(document).on('peer.load_map', function(e, data){
                map = new Map('http://mboulette.16mb.com/' + data.map);
                assets.test();
            });

            $(document).on('peer.upd_players', function(e, data){
                //console.log('Mis à jour des joueurs:', data);
                
                //Créer les joueur manquant
                for (var i = players.length; i < data.players.length; i++) {
                    players.push(new Fireman());
                }

                players = players.slice(0, data.players.length);

                //Mettre à jour les position des joueurs
                for (var i = 0; i < data.players.length; i++) {
                    //console.log(data.players[i]);
                    players[i].current = data.players[i];
                }

            });

            $(document).on('peer.upd_remote_maps', function(e, data){

                for (var i = 0; i < data.floors.length; i++) {
                    map.floors[i].current = data.floors[i];
                }
                for (var i = 0; i < data.walls.length; i++) {
                    map.walls[i].current = data.walls[i];
                }
                for (var i = 0; i < data.furnitures.length; i++) {
                    map.furnitures[i].current = data.furnitures[i];
                }
                

                map.specials = [];

                for (var i = 0; i < data.fires.length; i++) {
                    map.specials.push(new SimplifiedFire(data.fires[i].size, data.fires[i].x, data.fires[i].y));
                }

            });

            $(document).on('click', '#btnConnectToServer', function(e){
                
                peer_server_name = $('#input_server_name').val();
                peer_player_name = $('#input_player_name').val();
                peer = new Peer({key: '0n74rtceakcyds4i'});

                conn = peer.connect(peer_server_name, {'label' : peer_player_name});

                conn.on('open', function() {

                    $('#form_peer_connect').hide();
                    $('#game_canvas').show();

                    peer_send({'action' : 'client_ready', 'connection' : this.provider.id});

                    console.log('Connexion établi avec le serveur ', conn);
                });

                conn.on('data', function(data) {
                    $(document).trigger('peer.' + data.action, data);
                });

                conn.on('close', function() {
                    alert('Déconnecté du serveur');
                    window.location.reload();
                });

            });


            $(document).on('keydown', function (e) {
                if (peer) {
                    keyboard[e.which] = true;
                    return false;
                }
            });

            $(document).on('keyup', function (e) {
                if (peer) {
                    keyboard[e.which] = false;
                    return false;
                }
            });

            var getUrlVars = function () {
                // Read a page's GET URL variables and return them as an associative array.
                var vars = [], hash;
                var hashes = window.location.href.slice(window.location.href.indexOf('?') + 1).split('&');
                for(var i = 0; i < hashes.length; i++)
                {
                    hash = hashes[i].split('=');
                    vars.push(hash[0]);
                    vars[hash[0]] = hash[1];
                }
                return vars;
            }

            if (typeof getUrlVars()['server'] != 'undefined') {
                $('#label_server').hide()
                $('#input_server_name').value = getUrlVars()['server'];
            }

        });


    </script>

</head>
<body>


    <div id="form_peer_connect">
        <label id='label_server'>Nom du serveur : <input id="input_server_name" value="test"></label><br>
        <label>Votre nom : <input id="input_player_name" ></label><br>

        <button id='btnConnectToServer'>Joindre le serveur</button>
    </div>

    <canvas id="game_canvas"></canvas>

</body>
</html>