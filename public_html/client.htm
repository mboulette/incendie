<!doctype html>

<html lang="en">
<head>
    <meta charset="utf-8">
    <title>Incendie</title>

    <link rel="stylesheet" href="css/main.css">

    <script src="javascript/jquery-2.2.1.min.js"></script>
    <script src="http://cdn.peerjs.com/0.3/peer.min.js"></script>
    <script src="javascript/tiles.js"></script>
    <script>

        var peer;
        var peer_server_name;
        var peer_player_name;
       
        var timer = performance.now();
        var ctx;
        var assets = new Assets();
        var players = [];
        var keyboard = [];

        var peer_send = function(data) {
            //console.log('Data envoyé', data);

            for (cn in peer.connections) {
                peer.connections[cn][0].send(data);
            }

        }

        var change_direction = function(player) {
            if (keyboard[37]) {
                if (player.direction != 'left') peer_send({'action' : 'change_direction', 'direction' : 'left' });
                player.direction = 'left';
                return;
            }
            if (keyboard[38]) {
                if (player.direction != 'up') peer_send({'action' : 'change_direction', 'direction' : 'up' });
                player.direction = 'up';
                return;
            }
            if (keyboard[39]) {
                if (player.direction != 'right') peer_send({'action' : 'change_direction', 'direction' : 'right' });
                player.direction = 'right';
                return;
            }
            if (keyboard[40]) {
                if (player.direction != 'down') peer_send({'action' : 'change_direction', 'direction' : 'down' });
                player.direction = 'down';
                return;
            }

            if (player.direction != 'none') {
                player.direction = 'none';
                peer_send({'action' : 'change_direction', 'direction' : 'none' });
                return;
            }
        }

        var main = function(now) {

            ctx.clearRect(0, 0, board.width, board.height);

            for (var i = 0; i < players.length; i++) {
                players[i].update(now-timer);
                players[i].draw();

                if (players[i].current.id == peer.connections[peer_server_name][0].id) {
                    change_direction(players[i].current);
                }
            }

            timer=now;
            requestAnimationFrame(main);
        };

        $( document ).on('AssetLoad', function(e, current, total){
            if (current == total) {
                main();
            }
        });


        $(document).ready(function() {

            board = $('canvas')[0];
            ctx = board.getContext('2d');

            ctx.canvas.width = window.innerWidth;
            ctx.canvas.height = window.innerHeight;


            $(window).resize(function() {
                ctx.canvas.width = window.innerWidth;
                ctx.canvas.height = window.innerHeight;        
            });

            $('#input_player_name').val('#'+Math.floor(Math.random()*16777215).toString(16));

            $(document).on('peer.upd_players', function(e, data){
                //console.log('Mis à jour des joueurs:', data);
                
                //Créer les joueur manquant
                for (var i = players.length; i < data.players.length; i++) {
                    players.push(new Fireman());
                }

                players = players.slice(0, data.players.length);

                //Mettre à jour les position des joueurs
                for (var i = 0; i < data.players.length; i++) {
                    //console.log(data.players[i]);
                    players[i].current = data.players[i];
                }

            });

            $(document).on('click', '#btnConnectToServer', function(e){
                
                peer_server_name = $('#input_server_name').val();
                peer_player_name = $('#input_player_name').val();
                peer = new Peer({key: '0n74rtceakcyds4i'});

                conn = peer.connect(peer_server_name, {'label' : peer_player_name});

                conn.on('open', function() {

                    $('#form_peer_connect').hide();
                    $('#game_canvas').show();

                    console.log('Connexion établi avec le serveur ', conn);
                });

                conn.on('data', function(data) {
                    $(document).trigger('peer.' + data.action, data);
                });

                conn.on('close', function() {
                    alert('Déconnecté du serveur');
                    window.location.reload();
                });

            });


            $(document).on('keydown', function (e) {
                keyboard[e.which] = true;
                return false;
            });

            $(document).on('keyup', function (e) {
                keyboard[e.which] = false;
                return false;
            });



        });


    </script>

</head>
<body>


    <div id="form_peer_connect">
        <label id='label_server'>Nom du serveur : <input id="input_server_name" value="test"></label><br>
        <label>Votre nom : <input id="input_player_name" ></label><br>

        <button id='btnConnectToServer'>Joindre le serveur</button>
    </div>

    <canvas id="game_canvas"></canvas>

</body>
</html>